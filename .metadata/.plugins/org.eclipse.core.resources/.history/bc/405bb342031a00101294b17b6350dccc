package com.demo.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.demo.model.Products;
import com.demo.service.IProductsService;

import jakarta.validation.Valid;

import org.springframework.web.bind.annotation.RequestBody;


/**
 * 
 */
/**
 * 
 */
@RestController
@RequestMapping("/api/products")
public class ProductsController {

	@Autowired
	private IProductsService iProductsService;

	/**
	 * 根據商品ID查詢商品。
	 * @param id 商品的ID
	 * @return 產品的詳細資料
	 */
	@GetMapping("/{id}")
	public Products findProductById(@PathVariable("id") Integer id) {
		return iProductsService.findProductById(id)
				.orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "商品不存在"));
	}

	/**
	 * 查詢所有商品。
	 * @return 所有商品的列表
	 */

	@GetMapping("/all")
	public List<Products> findAllProducts() {
		List<Products> products = iProductsService.findAllProducts();
		return checkNotEmpty(products, "沒有商品資料");
	}

	
	/**
	 * @param name
	 * @return 查詢到符合名稱的商品的列表
	 */
	@GetMapping("/name")
	public List<Products> findProductsByName(@RequestParam("name") String name) {
		List<Products> products = iProductsService.findProductsByName(name);
		return checkNotEmpty(products, "沒有商品資料");
	}

	/**
	 * 查詢低庫存商品
	 * @param threshold
	 * @return 庫存低於threshold的商品列表
	 */
	@GetMapping("/lowstock")
	public List<Products> searchLowStock(@RequestParam("threshold") Integer threshold) {
		List<Products> products = iProductsService.findLowStockProducts(threshold);
		return checkNotEmpty(products, "沒有商品資料");
	}


	/**
	 * 根據里程範圍查詢商品
	 * @param min
	 * @param max
	 * @return
	 */
	@GetMapping("/needmiles")
	public List<Products> searchByNeedmiles(@RequestParam(name = "min", required = false, defaultValue = "0") Integer min,
			@RequestParam(name = "max", required = false, defaultValue = "999999") Integer max) {
		List<Products> products = iProductsService.findProductsByNeedmiles(min, max);
		return checkNotEmpty(products, "沒有商品資料");
	}

	/**
	 * 新增一個商品。
	 * @param products 新商品的詳細資料
	 * @return product 新增的商品資料
	 */
	@PostMapping
	public Products create(@RequestBody @Valid Products product) {

		return iProductsService.saveProduct(product);

	}

	/**
	 * 刪除一個商品
	 * @param id
	 */
	@DeleteMapping("/{id}")
	public void delete(@PathVariable Integer id) {
		  iProductsService.findProductById(id)
	        .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "商品不存在"));
	    	
		iProductsService.deleteProductsById(id);
	}

	/**
	 * 更新指定ID商品的詳細資料。
	 * @param id 商品ID
	 * @param product   更新後的商品資料
	 * @return 更新後的商品資料
	 */

	@PutMapping("/{id}")
	public Products update(@PathVariable Integer id, @RequestBody Products product) {
		Optional<Products> existingProduct = iProductsService.findProductsById(id);
			if (existingProduct.isEmpty() ) {
				  throw new ResponseStatusException(HttpStatus.NOT_FOUND, "商品不存在");
			}
		return iProductsService.updateProductsById(id, product);
	}

	/**
	 * 檢查有無商品並回傳訊息
	 * @param <T>
	 * @param list
	 * @param errorMessage
	 * @return 查詢到的商品列表
	 */
	private <T> List<T> checkNotEmpty(List<T> list, String errorMessage) {
		if (list.isEmpty()) {
			throw new ResponseStatusException(HttpStatus.NOT_FOUND, errorMessage);
		}
		return list;
	}

}
